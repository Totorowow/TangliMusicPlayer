package com.tangli.musicplayer.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tangli.musicplayer.bean.Coconut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COCONUT".
*/
public class CoconutDao extends AbstractDao<Coconut, Long> {

    public static final String TABLENAME = "COCONUT";

    /**
     * Properties of entity Coconut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cover = new Property(1, int.class, "cover", false, "COVER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Duration = new Property(4, int.class, "duration", false, "DURATION");
        public final static Property ResId = new Property(5, int.class, "resId", false, "RES_ID");
        public final static Property IsFavourite = new Property(6, boolean.class, "isFavourite", false, "IS_FAVOURITE");
    }


    public CoconutDao(DaoConfig config) {
        super(config);
    }
    
    public CoconutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COCONUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COVER\" INTEGER NOT NULL ," + // 1: cover
                "\"NAME\" TEXT," + // 2: name
                "\"ARTIST\" TEXT," + // 3: artist
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"RES_ID\" INTEGER NOT NULL ," + // 5: resId
                "\"IS_FAVOURITE\" INTEGER NOT NULL );"); // 6: isFavourite
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_COCONUT_COVER ON \"COCONUT\"" +
                " (\"COVER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COCONUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coconut entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCover());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getResId());
        stmt.bindLong(7, entity.getIsFavourite() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coconut entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCover());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getResId());
        stmt.bindLong(7, entity.getIsFavourite() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Coconut readEntity(Cursor cursor, int offset) {
        Coconut entity = new Coconut( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cover
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.getInt(offset + 4), // duration
            cursor.getInt(offset + 5), // resId
            cursor.getShort(offset + 6) != 0 // isFavourite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coconut entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCover(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.getInt(offset + 4));
        entity.setResId(cursor.getInt(offset + 5));
        entity.setIsFavourite(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coconut entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coconut entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coconut entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
